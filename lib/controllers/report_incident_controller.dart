//  assigned dev: janjan
//  this is still a working code, generated by Gemini 2.0 Flash
//  not yet reviewed and tested as of March 18, 2025

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:geolocator/geolocator.dart'; // For location services
import 'package:flutter/material.dart'; // For displaying SnackBar (optional)

class EmergencyReportController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> emergencyReport(
      String userId,
      String emergencyType,
      GeoPoint location,
      String additionalInfo,
      BuildContext? context, // Added context for SnackBar
      ) async {
    try {
      Map<String, dynamic> incidentData = {
        "emergency_type": emergencyType,
        "location": location,
        "additional_info": additionalInfo,
        "created_by": userId,
        "status": "Pending",
        "created_at": FieldValue.serverTimestamp(), // Add timestamp
      };

      await _firestore.collection("incidents").add(incidentData);
      notifyCommandCenter(incidentData); // Call the notification function

      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Incident Reported")),
        );
      } else {
        print("Incident Reported"); // For console output if no context
      }

    } catch (e) {
      print("Error reporting emergency: $e");
      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Error reporting incident")),
        );
      }
    }
  }

  Future<GeoPoint> getLocation() async {
    try {
      LocationPermission permission = await Geolocator.requestPermission(); // Request permissions
      if (permission == LocationPermission.denied || permission == LocationPermission.deniedForever) {
        throw Exception("Location permissions are denied");
      }

      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
      return GeoPoint(position.latitude, position.longitude);
    } catch (e) {
      print("Error getting location: $e");
      // Handle location errors (e.g., return a default location, show an error message)
      return GeoPoint(0.0, 0.0); // Return a default location or rethrow the error
    }
  }

  String getEmergencyType(String selectedType) {
    return selectedType;
  }

  void notifyCommandCenter(Map<String, dynamic> incidentData) {
    _firestore.collection("notifications").add(incidentData);
    print("Notified command center: $incidentData");
  }
}