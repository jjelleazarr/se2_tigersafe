//  assigned dev: janjan
//  this is still a working code, generated by Gemini 2.0 Flash
//  not yet reviewed and tested as of March 18, 2025

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart'; // For currentUser.uid
import 'package:flutter/material.dart'; // For SnackBar (optional)

class NotifyDispatchingController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance; // Initialize FirebaseAuth

  Future<void> assignResponseTeam(String incidentId, String teamId, BuildContext? context) async {
    try {
      await _firestore.collection("incidents").doc(incidentId).update({
        "assigned_team": teamId,
        "status": "Dispatched",
      });

      notifyTeamOfAssignment(teamId, incidentId);

      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Team Assigned")),
        );
      } else {
        print("Team Assigned");
      }
    } catch (e) {
      print("Error assigning team: $e");
      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Error assigning team")),
        );
      }
    }
  }

  void notifyTeamOfAssignment(String teamId, String incidentId) {
    try {
      Map<String, dynamic> notification = {
        "title": "New Incident Assigned",
        "message": "You have been assigned to incident #$incidentId",
        "timestamp": FieldValue.serverTimestamp(),
      };
      _firestore.collection("teams").doc(teamId).collection("notifications").add(notification);
      print("Notification sent to team $teamId for incident $incidentId");
    } catch (e) {
      print("Error sending team assignment notification: $e");
    }
  }

  Future<void> responderStatusUpdate(String incidentId, String statusUpdate, BuildContext? context) async {
    try {
      await _firestore.collection("incidents").doc(incidentId).update({
        "status": statusUpdate,
      });

      logERTActivity(incidentId, statusUpdate);

      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Status Updated")),
        );
      } else {
        print("Status Updated");
      }
    } catch (e) {
      print("Error updating responder status: $e");
      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Error updating status")),
        );
      }
    }
  }

  void logERTActivity(String incidentId, String activity) {
    try {
      User? user = _auth.currentUser; // Get the current user
      if (user != null) {
        Map<String, dynamic> logEntry = {
          "incident_id": incidentId,
          "activity": activity,
          "timestamp": FieldValue.serverTimestamp(),
          "performed_by": user.uid, // Use the user's UID
        };
        _firestore.collection("incidents").doc(incidentId).collection("logs").add(logEntry);
        print("Logged ERT activity for incident $incidentId: $activity");
      } else {
        print("Error: User not logged in. Cannot log ERT activity.");
      }
    } catch (e) {
      print("Error logging ERT activity: $e");
    }
  }
}