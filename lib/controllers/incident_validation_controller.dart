//  assigned dev: janjan
//  this is still a working code, generated by Gemini 2.0 Flash
//  not yet reviewed and tested as of March 18, 2025

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart'; // For SnackBar (optional)

class IncidentValidationController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> incidentValidation(String incidentId, BuildContext? context) async {
    try {
      DocumentSnapshot incident =
      await _firestore.collection("incidents").doc(incidentId).get();

      if (incident.exists) {
        await _firestore.collection("incidents").doc(incidentId).update({
          "status": "Validated",
          "validated_at": FieldValue.serverTimestamp(),
        });

        notifyCommandCenterAboutValidation(incidentId);

        if (context != null) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text("Incident Validated")),
          );
        } else {
          print("Incident Validated");
        }
      } else {
        if (context != null) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text("Incident not found")),
          );
        } else {
          print("Incident not found");
        }
      }
    } catch (e) {
      print("Error validating incident: $e");
      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Error validating incident")),
        );
      }
    }
  }

  void notifyCommandCenterAboutValidation(String incidentId) {
    try {
      Map<String, dynamic> notification = {
        "title": "Incident Validated",
        "message": "Incident #$incidentId has been validated.",
        "timestamp": FieldValue.serverTimestamp(),
      };
      _firestore.collection("notifications").add(notification);
      print("Notification sent for incident validation: $incidentId");
    } catch (e) {
      print("Error sending validation notification: $e");
    }
  }
}