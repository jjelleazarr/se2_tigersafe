//  assigned dev: janjan
//  this is still a working code, generated by Gemini 2.0 Flash
//  not yet reviewed and tested as of March 18, 2025

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class GenStatUpdateController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> statusUpdate(String incidentId, String newStatus, BuildContext? context) async {
    try {
      await _firestore.collection("incidents").doc(incidentId).update({
        "status": newStatus,
        "status_changed_at": FieldValue.serverTimestamp(),
      });

      List<String> stakeholders = await getStakeholdersOfIncident(incidentId);
      for (String stakeholder in stakeholders) {
        sendNotification(stakeholder, "Incident Status Update",
            "The status of incident #$incidentId has changed to $newStatus");
      }

      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Status Update Sent")),
        );
      } else {
        print("Status Update Sent");
      }
    } catch (e) {
      print("Error updating status: $e");
      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Error updating status")),
        );
      }
    }
  }

  Future<List<String>> getStakeholdersOfIncident(String incidentId) async {
    try {
      DocumentSnapshot incidentDoc =
      await _firestore.collection("incidents").doc(incidentId).get();
      if (incidentDoc.exists) {
        Map<String, dynamic>? data = incidentDoc.data() as Map<String, dynamic>?;

        if (data != null && data.containsKey("stakeholders")) {
          List<dynamic>? stakeholders = data["stakeholders"] as List<dynamic>?;
          if (stakeholders != null) {
            return stakeholders.map((stakeholder) => stakeholder.toString()).toList();
          }
        }
      }
      return []; // Return an empty list if stakeholders are not found or error
    } catch (e) {
      print("Error getting stakeholders: $e");
      return []; // Return an empty list on error
    }
  }

  void sendNotification(String userId, String title, String message) {
    try {
      Map<String, dynamic> notification = {
        "title": title,
        "message": message,
        "timestamp": FieldValue.serverTimestamp(),
        "userId": userId,
      };
      _firestore.collection("notifications").add(notification);
      print("Notification sent to user $userId: $title");
    } catch (e) {
      print("Error sending notification: $e");
    }
  }
}