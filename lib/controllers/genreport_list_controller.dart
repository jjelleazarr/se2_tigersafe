//  assigned dev: janjan
//  this is still a working code, generated by Gemini 2.0 Flash
//  not yet reviewed and tested as of March 18, 2025

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:pdf/widgets.dart' as pw; // For PDF generation
import 'package:pdf/pdf.dart'; // For PDF page format
import 'dart:io'; // For file operations
import 'package:path_provider/path_provider.dart'; // For getting app directories
import 'package:flutter/material.dart'; // For SnackBar (optional)

class GeneralReportListController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<List<Map<String, dynamic>>> generateReportsList() async {
    try {
      QuerySnapshot reportsSnapshot = await _firestore.collection("incidents").get(); // Assuming "incidents" collection
      List<Map<String, dynamic>> reportList = reportsSnapshot.docs
          .map((doc) => doc.data() as Map<String, dynamic>)
          .toList();

      return reportList;
    } catch (e) {
      print("Error generating reports list: $e");
      return []; // Return an empty list on error
    }
  }

  Future<void> exportReportsToPDF(List<Map<String, dynamic>> reportList, BuildContext? context) async {
    try {
      final pdf = await generatePDF(reportList);
      await savePDFToFile(pdf);
      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Report List Generated")),
        );
      } else {
        print("Report List Generated");
      }
    } catch (e) {
      print("Error exporting reports to PDF: $e");
      if (context != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Error generating report list")),
        );
      }
    }
  }

  Future<pw.Document> generatePDF(List<Map<String, dynamic>> reportList) async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        build: (pw.Context context) {
          List<pw.Widget> widgets = [];
          widgets.add(pw.Header(level: 1, text: "Incident Reports"));

          for (var report in reportList) {
            widgets.add(pw.Paragraph(text: "Report ID: ${report['incidentId'] ?? 'N/A'}"));
            widgets.add(pw.Paragraph(text: "Emergency Type: ${report['emergency_type'] ?? 'N/A'}"));
            widgets.add(pw.Paragraph(text: "Location: ${report['location']?.toString() ?? 'N/A'}"));
            widgets.add(pw.Paragraph(text: "Status: ${report['status'] ?? 'N/A'}"));
            widgets.add(pw.Paragraph(text: "Created At: ${report['created_at']?.toDate().toString() ?? 'N/A'}"));
            widgets.add(pw.Divider());
          }

          return widgets;
        },
      ),
    );

    return pdf;
  }

  Future<void> savePDFToFile(pw.Document pdf) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final file = File("${directory.path}/incident_reports.pdf");
      await file.writeAsBytes(await pdf.save());
      print("PDF saved to ${file.path}");
    } catch (e) {
      print("Error saving PDF: $e");
    }
  }
}